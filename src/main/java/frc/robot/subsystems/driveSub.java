package frc.robot.subsystems;

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Constants;
import frc.robot.Robot;
import frc.robot.commands.driveCmd;
import com.ctre.phoenix.motorcontrol.can.TalonFX;
import com.ctre.phoenix.sensors.SensorInitializationStrategy;

import com.ctre.phoenix.motorcontrol.can.TalonFX;
import com.ctre.phoenix.sensors.SensorInitializationStrategy;

import java.util.ArrayList;
import java.util.Arrays;

import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class driveSub extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
     
  
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public driveSub() {
        TalonFX[] talons = {
            Robot._rghtFront,
            Robot._rghtFollower,
            Robot._leftFront,
            Robot._leftFollower
        };

        for(TalonFX talon : talons){
            talon.setSelectedSensorPosition(0);
            talon.configIntegratedSensorInitializationStrategy(SensorInitializationStrategy.BootToZero);

            talon.configFactoryDefault();
            talon.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
            talon.setSensorPhase(Constants.kSensorPhase);
            talon.setInverted(Constants.kMotorInvert);

            talon.configNominalOutputForward(0, Constants.kTimeoutMs);
            talon.configNominalOutputReverse(0, Constants.kTimeoutMs);
            talon.configPeakOutputForward(0.3, Constants.kTimeoutMs);
            talon.configPeakOutputReverse(-0.3, Constants.kTimeoutMs);

            talon.configAllowableClosedloopError(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);

            talon.config_kF(Constants.kPIDLoopIdx, Constants.kGains.kF, Constants.kTimeoutMs);
            talon.config_kP(Constants.kPIDLoopIdx, Constants.kGains.kP, Constants.kTimeoutMs);
            talon.config_kI(Constants.kPIDLoopIdx, Constants.kGains.kI, Constants.kTimeoutMs);
            talon.config_kD(Constants.kPIDLoopIdx, Constants.kGains.kD, Constants.kTimeoutMs);
        }
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new driveCmd());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    //https://www.ctr-electronics.com/downloads/api/java/html/classcom_1_1ctre_1_1phoenix_1_1motorcontrol_1_1can_1_1_talon_f_x.html#a864a25124fe619649f1d53509ec756ec
    // public void driveStraight(double distance){//40 units of distance is 1.5 feet
    //     distance*=1000;

    // }

    public void driveStraight(double velocity){
        Robot._rghtFront.set(TalonFXControlMode.Velocity, -velocity);
        Robot._rghtFollower.set(TalonFXControlMode.Follower, 5);

        Robot._leftFront.set(TalonFXControlMode.Velocity, velocity);
        Robot._leftFollower.set(TalonFXControlMode.Follower, 0);
    }

    //https://www.ctr-electronics.com/downloads/api/java/html/classcom_1_1ctre_1_1phoenix_1_1motorcontrol_1_1can_1_1_talon_f_x.html#a864a25124fe619649f1d53509ec756ec
    public void turn(char direction, double speedL, double speedR){
        Robot._rghtFront.set(TalonFXControlMode.Velocity, direction=='R' ? speedR : -speedR);
        Robot._rghtFollower.set(TalonFXControlMode.Follower, 5);

        Robot._leftFront.set(TalonFXControlMode.Velocity, direction=='R' ? speedL : -speedL);
        Robot._leftFollower.set(TalonFXControlMode.Follower, 0);
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    }

    public void subArcadeDrive(Joystick stick) {
        /* get gamepad stick values */
double forw = +1 * Robot._joystick.getRawAxis(1); /* positive is forward */
double turn = -1 * Robot._joystick.getRawAxis(4); /* positive is right */
boolean btn1 = Robot._joystick.getRawButton(1); /* is button is down, print joystick values */

String work = "";
/* deadband gamepad 10% */
if (Math.abs(forw) < 0.10) {
    forw = 0;
}
if (Math.abs(turn) < 0.10) {
    turn = 0;
}
/* drive robot */
Robot._diffDrive.arcadeDrive(forw, turn);
    /*
 * [2] Make sure Gamepad Forward is positive for FORWARD, and GZ is positive for 
 * RIGHT
 */

 work += " GF:" + forw + " GT:" + turn;
/* get sensor values */
// double leftPos = _leftFront.GetSelectedSensorPosition(0);
// double rghtPos = _rghtFront.GetSelectedSensorPosition(0);
double leftVelUnitsPer100ms = Robot._leftFront.getSelectedSensorVelocity(0);
double rghtVelUnitsPer100ms = Robot._rghtFront.getSelectedSensorVelocity(0);
work += " L:" + leftVelUnitsPer100ms + " R:" + rghtVelUnitsPer100ms;
/*
 * drive motor at least 25%, Talons will auto-detect if sensor is out of phase
 */
Robot._leftFront.getFaults(Robot._faults_L);
Robot._rghtFront.getFaults(Robot._faults_R);
if (Robot._faults_L.SensorOutOfPhase) {
    work += " L sensor is out of phase";
}
if (Robot._faults_R.SensorOutOfPhase) {
    work += " R sensor is out of phase";
}
/* print to console if btn1 is held down */
if (btn1) {
    System.out.println(work);
}
SmartDashboard.putNumber("right front position", Robot._rghtFront.getSelectedSensorPosition(0));
SmartDashboard.putNumber("right follower position", Robot._rghtFollower.getSelectedSensorPosition(0));
SmartDashboard.putNumber("left front position", Robot._leftFront.getSelectedSensorPosition(0));
SmartDashboard.putNumber("left follower position", Robot._leftFollower.getSelectedSensorPosition(0));
        
        
        
        
      //  Robot._diffDrive.arcadeDrive(-stick.getY(), stick.getRawAxis(4), true);
        // =====================================================================================
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


}