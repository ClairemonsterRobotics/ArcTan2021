package frc.robot.subsystems;

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Constants;
import frc.robot.Robot;
import frc.robot.commands.driveCmd;
import com.ctre.phoenix.motorcontrol.can.TalonFX;
import com.ctre.phoenix.sensors.SensorInitializationStrategy;

import com.ctre.phoenix.motorcontrol.can.TalonFX;
import com.ctre.phoenix.sensors.SensorInitializationStrategy;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class driveSub extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
     
  
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public driveSub() {
        // // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        Robot._rghtFront.setSelectedSensorPosition(0);
        Robot._rghtFollower.setSelectedSensorPosition(0);
        Robot._leftFront.setSelectedSensorPosition(0);
        Robot._leftFollower.setSelectedSensorPosition(0);

        Robot._rghtFront.configIntegratedSensorInitializationStrategy(SensorInitializationStrategy.BootToZero);
        Robot._rghtFollower.configIntegratedSensorInitializationStrategy(SensorInitializationStrategy.BootToZero);
        Robot._leftFront.configIntegratedSensorInitializationStrategy(SensorInitializationStrategy.BootToZero);
        Robot._leftFollower.configIntegratedSensorInitializationStrategy(SensorInitializationStrategy.BootToZero);

        Robot._rghtFront.configFactoryDefault();
        Robot._rghtFollower.configFactoryDefault();
        Robot._leftFront.configFactoryDefault();
        Robot._leftFollower.configFactoryDefault();

        Robot._rghtFront.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
        Robot._rghtFollower.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
        Robot._leftFront.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
        Robot._leftFollower.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, Constants.kPIDLoopIdx, Constants.kTimeoutMs);

        Robot._rghtFront.setSensorPhase(Constants.kSensorPhase);
        Robot._rghtFollower.setSensorPhase(Constants.kSensorPhase);
        Robot._leftFront.setSensorPhase(Constants.kSensorPhase);
        Robot._leftFollower.setSensorPhase(Constants.kSensorPhase);

        Robot._rghtFront.setInverted(Constants.kMotorInvert);
        Robot._rghtFollower.setInverted(Constants.kMotorInvert);
        Robot._leftFront.setInverted(Constants.kMotorInvert);
        Robot._leftFollower.setInverted(Constants.kMotorInvert);


        Robot._rghtFront.configNominalOutputForward(0, Constants.kTimeoutMs);
        Robot._rghtFollower.configNominalOutputForward(0, Constants.kTimeoutMs);
        Robot._leftFront.configNominalOutputForward(0, Constants.kTimeoutMs);
        Robot._leftFollower.configNominalOutputForward(0, Constants.kTimeoutMs);

        Robot._rghtFront.configNominalOutputReverse(0, Constants.kTimeoutMs);
        Robot._rghtFollower.configNominalOutputReverse(0, Constants.kTimeoutMs);
        Robot._leftFront.configNominalOutputReverse(0, Constants.kTimeoutMs);
        Robot._leftFollower.configNominalOutputReverse(0, Constants.kTimeoutMs);

        Robot._rghtFront.configPeakOutputForward(0.3, Constants.kTimeoutMs);
        Robot._rghtFollower.configPeakOutputForward(0.3, Constants.kTimeoutMs);
        Robot._leftFront.configPeakOutputForward(0.3, Constants.kTimeoutMs);
        Robot._leftFollower.configPeakOutputForward(0.3, Constants.kTimeoutMs);

        Robot._rghtFront.configPeakOutputReverse(-0.3, Constants.kTimeoutMs);
        Robot._rghtFollower.configPeakOutputReverse(-0.3, Constants.kTimeoutMs);
        Robot._leftFront.configPeakOutputReverse(-0.3, Constants.kTimeoutMs);
        Robot._leftFollower.configPeakOutputReverse(-0.3, Constants.kTimeoutMs);

        Robot._rghtFront.configAllowableClosedloopError(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
        Robot._rghtFollower.configAllowableClosedloopError(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
        Robot._leftFront.configAllowableClosedloopError(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
        Robot._leftFollower.configAllowableClosedloopError(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);

        Robot._rghtFront.config_kF(Constants.kPIDLoopIdx, Constants.kGains.kF, Constants.kTimeoutMs);
        Robot._rghtFollower.config_kF(Constants.kPIDLoopIdx, Constants.kGains.kF, Constants.kTimeoutMs);
        Robot._leftFront.config_kF(Constants.kPIDLoopIdx, Constants.kGains.kF, Constants.kTimeoutMs);
        Robot._leftFollower.config_kF(Constants.kPIDLoopIdx, Constants.kGains.kF, Constants.kTimeoutMs);

        Robot._rghtFront.config_kP(Constants.kPIDLoopIdx, Constants.kGains.kP, Constants.kTimeoutMs);
        Robot._rghtFollower.config_kP(Constants.kPIDLoopIdx, Constants.kGains.kP, Constants.kTimeoutMs);
        Robot._leftFront.config_kP(Constants.kPIDLoopIdx, Constants.kGains.kP, Constants.kTimeoutMs);
        Robot._leftFollower.config_kP(Constants.kPIDLoopIdx, Constants.kGains.kP, Constants.kTimeoutMs);

        Robot._rghtFront.config_kI(Constants.kPIDLoopIdx, Constants.kGains.kI, Constants.kTimeoutMs);
        Robot._rghtFollower.config_kI(Constants.kPIDLoopIdx, Constants.kGains.kI, Constants.kTimeoutMs);
        Robot._leftFront.config_kI(Constants.kPIDLoopIdx, Constants.kGains.kI, Constants.kTimeoutMs);
        Robot._leftFollower.config_kI(Constants.kPIDLoopIdx, Constants.kGains.kI, Constants.kTimeoutMs);

        Robot._rghtFront.config_kD(Constants.kPIDLoopIdx, Constants.kGains.kD, Constants.kTimeoutMs);
        Robot._rghtFollower.config_kD(Constants.kPIDLoopIdx, Constants.kGains.kD, Constants.kTimeoutMs);
        Robot._leftFront.config_kD(Constants.kPIDLoopIdx, Constants.kGains.kD, Constants.kTimeoutMs);
        Robot._leftFollower.config_kD(Constants.kPIDLoopIdx, Constants.kGains.kD, Constants.kTimeoutMs);

        // // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new driveCmd());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    //https://www.ctr-electronics.com/downloads/api/java/html/classcom_1_1ctre_1_1phoenix_1_1motorcontrol_1_1can_1_1_talon_f_x.html#a864a25124fe619649f1d53509ec756ec
    public void driveStraight(double distance){//1 unit of distance is 26.67 
        distance*=1000;

        Robot._rghtFront.set(TalonFXControlMode.Position, -(distance + Robot._rghtFront.getSelectedSensorPosition(0)));
        Robot._rghtFollower.set(TalonFXControlMode.Position, -(distance + Robot._rghtFront.getSelectedSensorPosition(0)));

        Robot._leftFront.set(TalonFXControlMode.Position, distance + Robot._rghtFront.getSelectedSensorPosition(0));
        Robot._leftFollower.set(TalonFXControlMode.Position, distance + Robot._rghtFront.getSelectedSensorPosition(0));
    }

    public void turn(double power){
        // distance*=1000;
        double leftPower = 0,
               rightPower = 0;

        Robot._leftFront.set(TalonFXControlMode.PercentOutput, leftPower);
        Robot._leftFollower.set(TalonFXControlMode.PercentOutput, leftPower);

        Robot._rghtFront.set(TalonFXControlMode.PercentOutput, rightPower);
        Robot._rghtFollower.set(TalonFXControlMode.PercentOutput, rightPower);

    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    }

    public void subArcadeDrive(Joystick stick) {
        Robot._diffDrive.arcadeDrive(-stick.getY(), stick.getRawAxis(4), true);
        // =====================================================================================
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


}