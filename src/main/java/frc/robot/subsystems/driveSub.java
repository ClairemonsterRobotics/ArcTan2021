package frc.robot.subsystems;

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Robot;
import frc.robot.commands.driveCmd;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class driveSub extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Spark rightMotorPair;
    public Spark leftMotorPair;
    private DifferentialDrive diffDrive;
    public Encoder rightPairEncoder;
    public Encoder leftPairEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public driveSub() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightMotorPair = new Spark(1);
        addChild("rightMotorPair", rightMotorPair);
        rightMotorPair.setInverted(false);

        leftMotorPair = new Spark(0);
        addChild("leftMotorPair", leftMotorPair);
        leftMotorPair.setInverted(false);

        diffDrive = new DifferentialDrive(leftMotorPair, rightMotorPair);
        addChild("diffDrive", diffDrive);
        diffDrive.setSafetyEnabled(true);
        diffDrive.setExpiration(0.1);
        diffDrive.setMaxOutput(1.0);

        double encoderTickConstant = 1 / (60 / Math.PI); // gives approx 1in/1 encoder tick (CHECK YOUR MATH!)

        rightPairEncoder = new Encoder(2, 3, false);
        addChild("rightPairEncoder", rightPairEncoder);
        rightPairEncoder.setDistancePerPulse(1.0); // set twice?
        // rightPairEncoder.setIndexSource(11, IndexingType.kResetOnRisingEdge);
        rightPairEncoder.setDistancePerPulse(encoderTickConstant);

        leftPairEncoder = new Encoder(0, 1, false);
        addChild("leftPairEncoder", leftPairEncoder);
        leftPairEncoder.setDistancePerPulse(1.0); // set twice?
        // leftPairEncoder.setIndexSource(14, IndexingType.kResetOnRisingEdge);
        leftPairEncoder.setDistancePerPulse(encoderTickConstant);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new driveCmd());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    }

    public void subArcadeDrive(Joystick stick) {
        diffDrive.arcadeDrive(-stick.getY(), stick.getRawAxis(4), true);
        // =====================================================================================
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    public void resetEncoders() {
        rightPairEncoder.reset();
        leftPairEncoder.reset();

    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void limelightDrive(double m_LimelightDriveCommand, double m_LimelightSteerCommand) {

        diffDrive.arcadeDrive(m_LimelightDriveCommand, m_LimelightSteerCommand, true);
        SmartDashboard.putNumber("limelight drive cmd", m_LimelightDriveCommand);
        SmartDashboard.putNumber("limelight steer cmd", m_LimelightSteerCommand);

        // leftMotorPair.set(power);
        // rightMotorPair.set(-power * compensationMult * .80);
    }

}